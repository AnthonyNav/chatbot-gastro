# Docker Compose for GastroChatbot - Production Ready
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gastro-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gastro_chatbot}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=es_ES.UTF-8 --lc-ctype=es_ES.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - gastro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-gastro_chatbot}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.gastrochatbot.service=database"
      - "com.gastrochatbot.environment=${NODE_ENV:-production}"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gastro-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - gastro-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.gastrochatbot.service=cache"
      - "com.gastrochatbot.environment=${NODE_ENV:-production}"

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-production}
    container_name: gastro-backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-gastro_chatbot}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      
      # API Configuration
      PORT: 3001
      NODE_ENV: ${NODE_ENV:-production}
      API_VERSION: v1
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      RATE_LIMIT_WINDOW: 900000
      RATE_LIMIT_MAX: 100
      
      # Medical Compliance
      HIPAA_COMPLIANCE: true
      AUDIT_LOGGING: true
      DATA_RETENTION_DAYS: 2555
      
      # External APIs
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GOOGLE_CLOUD_PROJECT: ${GOOGLE_CLOUD_PROJECT}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gastro-network
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.gastrochatbot.service=backend"
      - "com.gastrochatbot.environment=${NODE_ENV:-production}"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:3001/api}
        - VITE_NODE_ENV=${NODE_ENV:-production}
        - VITE_ENABLE_ANALYTICS=${VITE_ENABLE_ANALYTICS:-true}
        - VITE_HIPAA_COMPLIANCE=true
    container_name: gastro-frontend
    restart: unless-stopped
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:3001/api}
      - VITE_NODE_ENV=${NODE_ENV:-production}
      - VITE_ENABLE_ANALYTICS=${VITE_ENABLE_ANALYTICS:-true}
      - VITE_APP_NAME=GastroChatbot
      - VITE_APP_VERSION=1.0.0
    ports:
      - "${FRONTEND_PORT:-8080}:8080"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - gastro-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.gastrochatbot.service=frontend"
      - "com.gastrochatbot.environment=${NODE_ENV:-production}"

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: gastro-nginx
    restart: unless-stopped
    profiles:
      - production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - gastro-network
    labels:
      - "com.gastrochatbot.service=proxy"
      - "com.gastrochatbot.environment=${NODE_ENV:-production}"

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: gastro-prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - gastro-network
    labels:
      - "com.gastrochatbot.service=monitoring"

  # Monitoring - Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: gastro-grafana
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - gastro-network
    labels:
      - "com.gastrochatbot.service=monitoring"

volumes:
  postgres_data:
    driver: local
    labels:
      - "com.gastrochatbot.volume=database"
  redis_data:
    driver: local
    labels:
      - "com.gastrochatbot.volume=cache"
  prometheus_data:
    driver: local
    labels:
      - "com.gastrochatbot.volume=metrics"
  grafana_data:
    driver: local
    labels:
      - "com.gastrochatbot.volume=monitoring"

networks:
  gastro-network:
    driver: bridge
    labels:
      - "com.gastrochatbot.network=main"
